/*
 * Copyright 2016 Anthony.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package opdwms.core.template.datatables;

import java.util.Collection;
import java.util.Map;
import java.util.function.Function;

/**
 * @category    Datatables
 * @package     Dev
 * @since       Nov 05, 2018
 * @author      Ignatius
 * @version     1.0.0
 */
public interface DatatablesInterface {

    DataTable esDocument(String docName);

    DataTable esFields(String... fields);

    DataTable esDateFields(String... fields);

    Map<String, Object> showEsTable();

    /**
     * When one just wants to return an empty result set
     *
     * @return Map<String, Object>
     */
    public Map<String, Object> emptyResultSet();

    /**
     * Indicate whether we have prepared a native sql statement
     *
     * @param state
     * @return DataTable
     */
    public DataTable nativeSQL(boolean state);

    /**
     * Called to re-initialise the parameters as the class is ever on
     */
    /**
     * Specify the columns that will appear in the final result set in order to
     * assist this class in building the information needed to render the
     * DataTable result map
     *
     * @param select
     * @return DatatablesInterface
     */
    public DataTable select(String select);

    /**
     * Specify the tables where the information will be fetched from i.e. the
     * parent table and all the respective joins
     *
     * @param from
     * @return DataTable
     */
    public DataTable from(String from);

    /**
     * Specify the conditions that will be applied to the query. This will help
     * in building the filter used by DatatablesInterfaces
     *
     * @param where
     * @return DataTable
     */
    public DataTable where(String where);

    /**
     * Apply the group by clause in order to properly support the aggregate
     * functions
     *
     * @param groupBy
     * @return DataTable
     */
    public DataTable groupBy(String groupBy);

    /**
     * Set the formatter that will be used to format the response generated by
     * the class
     *
     * @param formatter
     * @return DataTable
     */
    public DataTable setFormatter(RowFormatInterface formatter);

    /**
     * Set the parameter bound to the parameterised query passed in the
     * conditions
     *
     * @param key
     * @param value
     * @return DataTable
     */
    public DataTable setParameter(String key, Object value);

    /**
     * Bind multiple values to a named query parameter.
     *
     * @param key
     * @param value
     * @return DataTable
     */
    public DatatablesInterface setParameterList(String key, Collection value);

    /**
     * Allow one to add multiple parameters
     *
     * @param map
     * @return DataTable
     */
    public DataTable setParameters(Map<String, Object> map);

    /**
     * Get the HQL that will be used to generate the result set
     *
     * @param setting
     * @return String
     */
    public String getHQL(String setting);

    /**
     * Get the parameters used to generate the result set
     *
     * @return  Map<String, Object>
     */
    public Map<String, Object> getParameters();

    /**
     * The following function generates the map used to render the result set
     *
     * @return Map<String, Object>
     */
    public Map<String, Object> showTable();

    /**
     * The following function generates the map used to render the result set
     *
     * @return Map<String, Object>
     */
    public Map<String, Object> showTable(Function<Object[], Object[]> func);

    /**
     *Allow one to specify the columns for footer totals
     *
     * @param key
     * @param columnName
     * @return DataTable
     */
    public DataTable setFooterColumn(String key, String columnName);

    /**
     * Allow one to specify the columns to order
     *
     * @param columns
     * @param order
     * @return DataTable
     */
    public DataTable setOrderingColumns(String columns, String order);

//    public List<String> getColumns();
}
